training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
View(training)
library(caret)
set.seed(8000)
modRf <- train(classe ~., data = training, method="rf")
library(caret)
summary(training)
training2 <- training[, colSums(is.na(training)) != nrow(training)]
colSums(is.na(training))
training2 <- training[, colSums(is.na(training)) > nrow(training)/2]
View(training2)
training2 <- training[, - colSums(is.na(training)) > nrow(training)/2]
training2 <- training[, -( colSums(is.na(training)) > nrow(training)/2)]
training2 <- training[, colSums(is.na(training)) < nrow(training)/2]
View(training2)
colSums(is.na(training))
summary(training2)
training3 <- training2[, colSums(is.na(training2 == "")) < nrow(training2)/2]
class(training2$kurtosis_yaw_dumbbell)
class(training2$kurtosis_roll_bell)
class(training2$kurtosis_roll_arm)
training2$kurtosis_roll_arm
library(caret)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
summary(training)
colSums(is.na(training))
training2 <- training[, colSums(is.na(training)) < nrow(training)/2]
summary(training2)
class(training2$kurtosis_yaw_dumbbell)
class(training2$kurtosis_roll_arm)
training2$kurtosis_roll_arm
training3 <- training2[, colSums(training2 == "") < nrow(training2)/2]
training4 <- training3[, -c(1:5)]
set.seed(8000)
trainingSmall = sample(training4, 1000)
trainingSmall = sample(training4, 1000)
trainingSmall = sample(training4, 10)
trainingSmall = sample(training4, 100)
trainingSmall = sample(training4, 50)
trainingSmall = sample(training4, 56)
trainingSmall = sample(training4, 55)
trainingSmall = sample(training4, 10)
trainingSmall = training4[sample(nrow(training4), 1000), ]
modRf <- train(classe ~., data = trainingSmall, method="rf")
modRf <- train(classe ~., data = trainingSmall, method="rf")
modGbm <- train(classe ~., data = trainingSmall, method="gbm")
modLda <- train(classe ~., data = trainingSmall, method="lda")
predRf <- predict(modRf, testing)
predGbm <- predict(modGbm, testing)
predLda <- predict(modLda, testing)
testingComb <- data.frame(predRf, predGbm, predLda, classe=testing$classe)
modComb <- train(classe ~., data = testingComb, method="rf")
predComb <- predict(modComb, testingComb)
confusionMatrix(predRf, testing$classe)$overall[1]
table(predRf, predGbm)
table(predRf, predLda)
table(predRf, predComb)
modLda <- train(classe ~., data = training4, method="lda")
predLda <- predict(modLda, testing)
table(predRf, predLda)
importance(modRf)
library(tree)
modTree =tree (classe∼. , trainingSmall )
modTree =tree (classe∼. , training4 )
summary(modTree)
summary(modRf)
summary(modRf$finalModel)
plot(modTree)
text(modTree, pretty =0)
trainingSmall = training4[sample(nrow(training4), 2000), ]
modRf <- train(classe ~., data = trainingSmall, method="rf")
modGbm <- train(classe ~., data = trainingSmall, method="gbm")
modLda <- train(classe ~., data = training4, method="lda")
predRf <- predict(modRf, testing)
predGbm <- predict(modGbm, testing)
predLda <- predict(modLda, testing)
table(predRf, predGbm)
table(predRf, predLda)
predRfTrain <- predict(modRf, training4)
predGbmTrain <- predict(modGbm, training4)
conf_rf <- confusionMatrix(training4$classe, predRfTrain)
conf_rf
accuracy_rf <- conf_rf$overall[1]
conf_gbm <- confusionMatrix(training4$classe, predGbmTrain)
conf_gbm
accuracy_gbm <- conf_gbm$overall[1]
sample <- sample(nrow(training4), 3000)
trainingSmall = training4[sample, ]
validationSmall = training4[-sample,]
modRf <- train(classe ~., data = trainingSmall, method="rf")
modGbm <- train(classe ~., data = trainingSmall, method="gbm")
predRf <- predict(modRf, validationSmall)
predGbm <- predict(modGbm, validationSmall)
conf_rf <- confusionMatrix(validationSmall$classe, predRf)
conf_rf
accuracy_rf <- conf_rf$overall[1]
conf_gbm <- confusionMatrix(validationSmall$classe, predGbm)
conf_gbm
accuracy_gbm <- conf_gbm$overall[1]
library ( randomForest)
set.seed(8000)
sample <- sample(nrow(training4), 1000)
trainingSmall = training4[sample, ]
validationSmall = training4[-sample,]
# modRf <- train(classe ~., data = trainingSmall, method="rf")
modRf <- randomForest( classe ~., data= trainingSmall, importance =TRUE )
modRf <- randomForest( classe ~., data= trainingSmall, importance =TRUE )
predRf <- predict(modRf, validationSmall)
conf_rf <- confusionMatrix(validationSmall$classe, predRf)
conf_rf
sample <- sample(nrow(training4), 2000)
trainingSmall = training4[sample, ]
validationSmall = training4[-sample,]
# modRf <- train(classe ~., data = trainingSmall, method="rf")
modRf <- randomForest( classe ~., data= trainingSmall, importance =TRUE )
predRf <- predict(modRf, validationSmall)
conf_rf <- confusionMatrix(validationSmall$classe, predRf)
conf_rf
modRf <- randomForest( classe ~., data= training4, importance =TRUE )
predRf <- predict(modRf, validationSmall)
conf_rf <- confusionMatrix(validationSmall$classe, predRf)
conf_rf
accuracy_rf <- conf_rf$overall[1]
summary(modRf$importance)
importance(modRf)
varImpPlot(modRf)
summary(training)
summary(training$var_accel_forearm)
naSummary <- summary(training$var_accel_forearm)
naSummary
class(naSummary)
naSummary[size(naSummary)]
naSummary[length(naSummary)]
naNum <- as.integer(naSummary[length(naSummary)])
naNum/nrow(training)
percent(naNum/nrow(training))
percent_format(naNum/nrow(training))
library(scales)
percent_format(naNum/nrow(training))
percent(naNum/nrow(training))
library(gbm)
modGbm <- gbm(classe ~., data = trainingSmall)
predGbm <- predict(modGbm, validationSmall)
conf_gbm <- confusionMatrix(validationSmall$classe, predGbm)
conf_gbm
accuracy_gbm <- conf_gbm$overall[1]
modGbm <- gbm(classe ~., data = training4)
predGbm <- predict(modGbm, validationSmall)
conf_gbm <- confusionMatrix(validationSmall$classe, predGbm)
conf_gbm
accuracy_gbm <- conf_gbm$overall[1]
?randomForest
