{
    "contents" : "---\ntitle: \"Practical Machine Learning Project\"\nauthor: \"Dongfeng Lu\"\ndate: \"February 25, 2016\"\noutput: html_document\n---\n### Executive Summary\n\nIn this project, we cleanse the training data, select the random forest method to build our model given the training data set, carry out the cross validation, discuss the characteristics of our model, and finally predict the outcome of the testing dataset. The most important point is that our model has a very small error rate of \"0.189%\" and this model is very reliable.\n\n### Data Cleansing \nFirst we load all the libraries we use in the project. Notice that we are loading \"randomForst\" packages because its random forest function is way faster than the \"train(..., method=\"rf\")\" method in \"caret\" package. We are still loading \"caret\" because its \"confusionMatrix\" is quite convinient.\n```{r message = FALSE}\nlibrary(scales)\nlibrary(randomForest)\nlibrary(caret)\n```\n\nWe then load the training data and testing data.\n\n```{r cache=TRUE}\ntraining <- read.csv(\"pml-training.csv\")\ntesting <- read.csv(\"pml-testing.csv\")\n```\n\n```{r echo=FALSE}\nnaSummary <- summary(training$var_accel_forearm);\nnaNum <- as.integer(naSummary[length(naSummary)])\n```\nOpening up the training data set, we can see that there are many columns with a lot of \"NA\" values or empty string values. When we check the \"summary(training)\", we can see that for most of those columns, the number of \"NA\" or empty string values is about `r naNum`, which is `r percent(naNum/nrow(training))` of the  `r nrow(training)` observations. Clearly, those columns are of little importance in this exercise. In addition, the first 5 columns like name and time does not have any predictive powers. We remove them with the following commands:\n```{r cache=TRUE}\ntraining <- training[, colSums(is.na(training)) < nrow(training)/2]\ntraining <- training[, colSums(training == \"\") < nrow(training)/2]\ntraining <- training[, -c(1:5)]\n```\n\nInterestingly we notice that the \"randomForest\" package is less forgiving than the \"caret\". One more cleansing we need to do is \n```{r}\nlevels(testing$new_window) <- levels(training$new_window)\n```\nbecause the \"new_window\" field contains \"no\" values only in test dataset, but contains \"no\" and \"yes\" in the training dataset. Thus, R creates an one-level factor for test dataset, and a two-level factor for the training dataset. When using the \"predict\" method on the original test dataset, R complains that \"Type of predictors in new data do not match that of the training data.\" The above assignment resolves the problem.\n\n### Model Selection\nThis is a problem of classification, and the most popular methods would be logistic regression, linear discrimianant analysis, and tree based models like bagging, random forest, and boosting. Frankly, with about `r ncol(training) -1 ` predictors in our cleansed dataset, we are more concerned with the prediction accuary than the interpretability. In addition, bagging, random forest and boosting are build from multiple trees and the results has already been averaged over a large number of tree models. Therefore, it has a lower bias and lower variance. In this project, we are going to use random forest method.\n\nTo have a good estimate of test errors, we will use bootstrap method to randomly sample one-tenth of the training data as our validation set for the cross-validation, and the rest as the new training set for building the model. We are going to test it out 10 times.\n\n```{r, cache=TRUE}\nk <- 10\nerrorRateRf <- rep (0 ,k)\nsubSetSize <- as.integer(nrow(training)/k)\nset.seed(900)\n\nfor (i in 1:k) {\n  validationSetRange = runif(subSetSize, 1, nrow(training))\n  validateSet = training[validationSetRange, ]\n  subTraingSet = training[-validationSetRange, ]\n  modRfSub <- randomForest( classe ~., data= subTraingSet )\n\n  predRfSub <- predict(modRfSub, validateSet)\n  confusionRfSub <- confusionMatrix(validateSet$classe, predRfSub)\n  errorRateRf[i] <- 1 - confusionRfSub$overall[1]\n}\n \n```\n\nAfter a long time of processing, we have the list of error rate for our 10 trials.\n```{r}\npercent(errorRateRf)\n```\n\nwith an average error rate of `r percent(mean(errorRateRf))`, which is pretty low. In other words, our model built with the random forest method and `r nrow(training)` observations is quite reliable.\n\nOur final model with the complete training set is given by\n\n```{r cache=TRUE}\nmodRf <- randomForest( classe ~., data= training, importance =TRUE )\n```\n\n### What Can We Learn About Our Model?\n```{r}\nmodRf\n```\nOur model has tries 500 trees, and uses 7 variables at each split instead of all `r ncol(training) -1 ` predictors as in bagging method. Its \"OOB estimate of the error rate\" is smaller than, but still very close to our test error rate of `r percent(mean(errorRateRf))`. In fact, the following plot shows us the error rates that this model has tried\n```{r fig.height=6, fig.width=10}\nplot(modRf, main = \"Our Model's Error Rate\")\n```\n\nOne will definitely wonder that out of `r ncol(training) -1 ` predictors, which are more important in our model? Let's draw an importance diagram:\n```{r fig.height=8, fig.width=10}\nvarImpPlot(modRf, main=\"Our Model's Importance Chart\")\n```\n\nWe can see that \"yaw_belt\", \"num_window\", and \"roll_belt\" are the top three influencers.\n\n### Prediction of the test set.\nFinally, we apply our model to the testing set and predict\n```{r}\npredict(modRf, testing)\n```",
    "created" : 1456461503275.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "490048508",
    "id" : "43E32613",
    "lastKnownWriteTime" : 1456636060,
    "path" : "C:/Projects/Coursera/PracticalMachineLearning/PracticalMachineLearning.Rmd",
    "project_path" : "PracticalMachineLearning.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_markdown"
}